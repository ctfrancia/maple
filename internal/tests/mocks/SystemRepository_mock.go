// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ctfrancia/maple/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSystemRepository creates a new instance of MockSystemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemRepository {
	mock := &MockSystemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSystemRepository is an autogenerated mock type for the SystemRepository type
type MockSystemRepository struct {
	mock.Mock
}

type MockSystemRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemRepository) EXPECT() *MockSystemRepository_Expecter {
	return &MockSystemRepository_Expecter{mock: &_m.Mock}
}

// CreateNewConsumer provides a mock function for the type MockSystemRepository
func (_mock *MockSystemRepository) CreateNewConsumer(consumer domain.NewAPIConsumer) error {
	ret := _mock.Called(consumer)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewConsumer")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) error); ok {
		r0 = returnFunc(consumer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSystemRepository_CreateNewConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewConsumer'
type MockSystemRepository_CreateNewConsumer_Call struct {
	*mock.Call
}

// CreateNewConsumer is a helper method to define mock.On call
//   - consumer domain.NewAPIConsumer
func (_e *MockSystemRepository_Expecter) CreateNewConsumer(consumer interface{}) *MockSystemRepository_CreateNewConsumer_Call {
	return &MockSystemRepository_CreateNewConsumer_Call{Call: _e.mock.On("CreateNewConsumer", consumer)}
}

func (_c *MockSystemRepository_CreateNewConsumer_Call) Run(run func(consumer domain.NewAPIConsumer)) *MockSystemRepository_CreateNewConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.NewAPIConsumer
		if args[0] != nil {
			arg0 = args[0].(domain.NewAPIConsumer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSystemRepository_CreateNewConsumer_Call) Return(err error) *MockSystemRepository_CreateNewConsumer_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSystemRepository_CreateNewConsumer_Call) RunAndReturn(run func(consumer domain.NewAPIConsumer) error) *MockSystemRepository_CreateNewConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// SelectByEmail provides a mock function for the type MockSystemRepository
func (_mock *MockSystemRepository) SelectByEmail(consumer domain.NewAPIConsumer) error {
	ret := _mock.Called(consumer)

	if len(ret) == 0 {
		panic("no return value specified for SelectByEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) error); ok {
		r0 = returnFunc(consumer)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSystemRepository_SelectByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectByEmail'
type MockSystemRepository_SelectByEmail_Call struct {
	*mock.Call
}

// SelectByEmail is a helper method to define mock.On call
//   - consumer domain.NewAPIConsumer
func (_e *MockSystemRepository_Expecter) SelectByEmail(consumer interface{}) *MockSystemRepository_SelectByEmail_Call {
	return &MockSystemRepository_SelectByEmail_Call{Call: _e.mock.On("SelectByEmail", consumer)}
}

func (_c *MockSystemRepository_SelectByEmail_Call) Run(run func(consumer domain.NewAPIConsumer)) *MockSystemRepository_SelectByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.NewAPIConsumer
		if args[0] != nil {
			arg0 = args[0].(domain.NewAPIConsumer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSystemRepository_SelectByEmail_Call) Return(err error) *MockSystemRepository_SelectByEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSystemRepository_SelectByEmail_Call) RunAndReturn(run func(consumer domain.NewAPIConsumer) error) *MockSystemRepository_SelectByEmail_Call {
	_c.Call.Return(run)
	return _c
}
