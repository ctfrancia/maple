// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockSecurityAdapter creates a new instance of MockSecurityAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSecurityAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSecurityAdapter {
	mock := &MockSecurityAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSecurityAdapter is an autogenerated mock type for the SecurityAdapter type
type MockSecurityAdapter struct {
	mock.Mock
}

type MockSecurityAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSecurityAdapter) EXPECT() *MockSecurityAdapter_Expecter {
	return &MockSecurityAdapter_Expecter{mock: &_m.Mock}
}

// CompareHashAndPassword provides a mock function for the type MockSecurityAdapter
func (_mock *MockSecurityAdapter) CompareHashAndPassword(encodedHash string, password string) (bool, error) {
	ret := _mock.Called(encodedHash, password)

	if len(ret) == 0 {
		panic("no return value specified for CompareHashAndPassword")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(encodedHash, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(encodedHash, password)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(encodedHash, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityAdapter_CompareHashAndPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CompareHashAndPassword'
type MockSecurityAdapter_CompareHashAndPassword_Call struct {
	*mock.Call
}

// CompareHashAndPassword is a helper method to define mock.On call
//   - encodedHash string
//   - password string
func (_e *MockSecurityAdapter_Expecter) CompareHashAndPassword(encodedHash interface{}, password interface{}) *MockSecurityAdapter_CompareHashAndPassword_Call {
	return &MockSecurityAdapter_CompareHashAndPassword_Call{Call: _e.mock.On("CompareHashAndPassword", encodedHash, password)}
}

func (_c *MockSecurityAdapter_CompareHashAndPassword_Call) Run(run func(encodedHash string, password string)) *MockSecurityAdapter_CompareHashAndPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSecurityAdapter_CompareHashAndPassword_Call) Return(b bool, err error) *MockSecurityAdapter_CompareHashAndPassword_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockSecurityAdapter_CompareHashAndPassword_Call) RunAndReturn(run func(encodedHash string, password string) (bool, error)) *MockSecurityAdapter_CompareHashAndPassword_Call {
	_c.Call.Return(run)
	return _c
}

// CreateSecretKey provides a mock function for the type MockSecurityAdapter
func (_mock *MockSecurityAdapter) CreateSecretKey(length int) (string, error) {
	ret := _mock.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecretKey")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int) (string, error)); ok {
		return returnFunc(length)
	}
	if returnFunc, ok := ret.Get(0).(func(int) string); ok {
		r0 = returnFunc(length)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(int) error); ok {
		r1 = returnFunc(length)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityAdapter_CreateSecretKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSecretKey'
type MockSecurityAdapter_CreateSecretKey_Call struct {
	*mock.Call
}

// CreateSecretKey is a helper method to define mock.On call
//   - length int
func (_e *MockSecurityAdapter_Expecter) CreateSecretKey(length interface{}) *MockSecurityAdapter_CreateSecretKey_Call {
	return &MockSecurityAdapter_CreateSecretKey_Call{Call: _e.mock.On("CreateSecretKey", length)}
}

func (_c *MockSecurityAdapter_CreateSecretKey_Call) Run(run func(length int)) *MockSecurityAdapter_CreateSecretKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecurityAdapter_CreateSecretKey_Call) Return(s string, err error) *MockSecurityAdapter_CreateSecretKey_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecurityAdapter_CreateSecretKey_Call) RunAndReturn(run func(length int) (string, error)) *MockSecurityAdapter_CreateSecretKey_Call {
	_c.Call.Return(run)
	return _c
}

// Hash provides a mock function for the type MockSecurityAdapter
func (_mock *MockSecurityAdapter) Hash(password string) (string, error) {
	ret := _mock.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(password)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(password)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSecurityAdapter_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type MockSecurityAdapter_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//   - password string
func (_e *MockSecurityAdapter_Expecter) Hash(password interface{}) *MockSecurityAdapter_Hash_Call {
	return &MockSecurityAdapter_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *MockSecurityAdapter_Hash_Call) Run(run func(password string)) *MockSecurityAdapter_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSecurityAdapter_Hash_Call) Return(s string, err error) *MockSecurityAdapter_Hash_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSecurityAdapter_Hash_Call) RunAndReturn(run func(password string) (string, error)) *MockSecurityAdapter_Hash_Call {
	_c.Call.Return(run)
	return _c
}
