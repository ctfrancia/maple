// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ctfrancia/maple/internal/core/ports"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHTTPClient creates a new instance of MockHTTPClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHTTPClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHTTPClient {
	mock := &MockHTTPClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHTTPClient is an autogenerated mock type for the HTTPClient type
type MockHTTPClient struct {
	mock.Mock
}

type MockHTTPClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHTTPClient) EXPECT() *MockHTTPClient_Expecter {
	return &MockHTTPClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Delete(ctx context.Context, url string, headers map[string]string) (*ports.HTTPResponse, error) {
	ret := _mock.Called(ctx, url, headers)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *ports.HTTPResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*ports.HTTPResponse, error)); ok {
		return returnFunc(ctx, url, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) *ports.HTTPResponse); ok {
		r0 = returnFunc(ctx, url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.HTTPResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = returnFunc(ctx, url, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockHTTPClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - headers map[string]string
func (_e *MockHTTPClient_Expecter) Delete(ctx interface{}, url interface{}, headers interface{}) *MockHTTPClient_Delete_Call {
	return &MockHTTPClient_Delete_Call{Call: _e.mock.On("Delete", ctx, url, headers)}
}

func (_c *MockHTTPClient_Delete_Call) Run(run func(ctx context.Context, url string, headers map[string]string)) *MockHTTPClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHTTPClient_Delete_Call) Return(hTTPResponse *ports.HTTPResponse, err error) *MockHTTPClient_Delete_Call {
	_c.Call.Return(hTTPResponse, err)
	return _c
}

func (_c *MockHTTPClient_Delete_Call) RunAndReturn(run func(ctx context.Context, url string, headers map[string]string) (*ports.HTTPResponse, error)) *MockHTTPClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Get(ctx context.Context, url string, headers map[string]string) (*ports.HTTPResponse, error) {
	ret := _mock.Called(ctx, url, headers)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ports.HTTPResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*ports.HTTPResponse, error)); ok {
		return returnFunc(ctx, url, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]string) *ports.HTTPResponse); ok {
		r0 = returnFunc(ctx, url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.HTTPResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = returnFunc(ctx, url, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockHTTPClient_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - headers map[string]string
func (_e *MockHTTPClient_Expecter) Get(ctx interface{}, url interface{}, headers interface{}) *MockHTTPClient_Get_Call {
	return &MockHTTPClient_Get_Call{Call: _e.mock.On("Get", ctx, url, headers)}
}

func (_c *MockHTTPClient_Get_Call) Run(run func(ctx context.Context, url string, headers map[string]string)) *MockHTTPClient_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHTTPClient_Get_Call) Return(hTTPResponse *ports.HTTPResponse, err error) *MockHTTPClient_Get_Call {
	_c.Call.Return(hTTPResponse, err)
	return _c
}

func (_c *MockHTTPClient_Get_Call) RunAndReturn(run func(ctx context.Context, url string, headers map[string]string) (*ports.HTTPResponse, error)) *MockHTTPClient_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Post provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Post(ctx context.Context, url string, body []byte, headers map[string]string) (*ports.HTTPResponse, error) {
	ret := _mock.Called(ctx, url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *ports.HTTPResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string) (*ports.HTTPResponse, error)); ok {
		return returnFunc(ctx, url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string) *ports.HTTPResponse); ok {
		r0 = returnFunc(ctx, url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.HTTPResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, map[string]string) error); ok {
		r1 = returnFunc(ctx, url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type MockHTTPClient_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - body []byte
//   - headers map[string]string
func (_e *MockHTTPClient_Expecter) Post(ctx interface{}, url interface{}, body interface{}, headers interface{}) *MockHTTPClient_Post_Call {
	return &MockHTTPClient_Post_Call{Call: _e.mock.On("Post", ctx, url, body, headers)}
}

func (_c *MockHTTPClient_Post_Call) Run(run func(ctx context.Context, url string, body []byte, headers map[string]string)) *MockHTTPClient_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHTTPClient_Post_Call) Return(hTTPResponse *ports.HTTPResponse, err error) *MockHTTPClient_Post_Call {
	_c.Call.Return(hTTPResponse, err)
	return _c
}

func (_c *MockHTTPClient_Post_Call) RunAndReturn(run func(ctx context.Context, url string, body []byte, headers map[string]string) (*ports.HTTPResponse, error)) *MockHTTPClient_Post_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockHTTPClient
func (_mock *MockHTTPClient) Put(ctx context.Context, url string, body []byte, headers map[string]string) (*ports.HTTPResponse, error) {
	ret := _mock.Called(ctx, url, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *ports.HTTPResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string) (*ports.HTTPResponse, error)); ok {
		return returnFunc(ctx, url, body, headers)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string) *ports.HTTPResponse); ok {
		r0 = returnFunc(ctx, url, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ports.HTTPResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, map[string]string) error); ok {
		r1 = returnFunc(ctx, url, body, headers)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHTTPClient_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockHTTPClient_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - body []byte
//   - headers map[string]string
func (_e *MockHTTPClient_Expecter) Put(ctx interface{}, url interface{}, body interface{}, headers interface{}) *MockHTTPClient_Put_Call {
	return &MockHTTPClient_Put_Call{Call: _e.mock.On("Put", ctx, url, body, headers)}
}

func (_c *MockHTTPClient_Put_Call) Run(run func(ctx context.Context, url string, body []byte, headers map[string]string)) *MockHTTPClient_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHTTPClient_Put_Call) Return(hTTPResponse *ports.HTTPResponse, err error) *MockHTTPClient_Put_Call {
	_c.Call.Return(hTTPResponse, err)
	return _c
}

func (_c *MockHTTPClient_Put_Call) RunAndReturn(run func(ctx context.Context, url string, body []byte, headers map[string]string) (*ports.HTTPResponse, error)) *MockHTTPClient_Put_Call {
	_c.Call.Return(run)
	return _c
}
