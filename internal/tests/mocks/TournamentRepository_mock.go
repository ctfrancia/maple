// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/ctfrancia/maple/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTournamentRepository creates a new instance of MockTournamentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTournamentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTournamentRepository {
	mock := &MockTournamentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTournamentRepository is an autogenerated mock type for the TournamentRepository type
type MockTournamentRepository struct {
	mock.Mock
}

type MockTournamentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTournamentRepository) EXPECT() *MockTournamentRepository_Expecter {
	return &MockTournamentRepository_Expecter{mock: &_m.Mock}
}

// GetTournaments provides a mock function for the type MockTournamentRepository
func (_mock *MockTournamentRepository) GetTournaments(ctx context.Context, page int, size int) ([]domain.Tournament, error) {
	ret := _mock.Called(ctx, page, size)

	if len(ret) == 0 {
		panic("no return value specified for GetTournaments")
	}

	var r0 []domain.Tournament
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.Tournament, error)); ok {
		return returnFunc(ctx, page, size)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int) []domain.Tournament); ok {
		r0 = returnFunc(ctx, page, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Tournament)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = returnFunc(ctx, page, size)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTournamentRepository_GetTournaments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTournaments'
type MockTournamentRepository_GetTournaments_Call struct {
	*mock.Call
}

// GetTournaments is a helper method to define mock.On call
//   - ctx context.Context
//   - page int
//   - size int
func (_e *MockTournamentRepository_Expecter) GetTournaments(ctx interface{}, page interface{}, size interface{}) *MockTournamentRepository_GetTournaments_Call {
	return &MockTournamentRepository_GetTournaments_Call{Call: _e.mock.On("GetTournaments", ctx, page, size)}
}

func (_c *MockTournamentRepository_GetTournaments_Call) Run(run func(ctx context.Context, page int, size int)) *MockTournamentRepository_GetTournaments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockTournamentRepository_GetTournaments_Call) Return(tournaments []domain.Tournament, err error) *MockTournamentRepository_GetTournaments_Call {
	_c.Call.Return(tournaments, err)
	return _c
}

func (_c *MockTournamentRepository_GetTournaments_Call) RunAndReturn(run func(ctx context.Context, page int, size int) ([]domain.Tournament, error)) *MockTournamentRepository_GetTournaments_Call {
	_c.Call.Return(run)
	return _c
}
