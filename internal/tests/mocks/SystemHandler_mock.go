// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockSystemHandler creates a new instance of MockSystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemHandler {
	mock := &MockSystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSystemHandler is an autogenerated mock type for the SystemHandler type
type MockSystemHandler struct {
	mock.Mock
}

type MockSystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemHandler) EXPECT() *MockSystemHandler_Expecter {
	return &MockSystemHandler_Expecter{mock: &_m.Mock}
}

// HealthHandler provides a mock function for the type MockSystemHandler
func (_mock *MockSystemHandler) HealthHandler(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockSystemHandler_HealthHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthHandler'
type MockSystemHandler_HealthHandler_Call struct {
	*mock.Call
}

// HealthHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockSystemHandler_Expecter) HealthHandler(w interface{}, r interface{}) *MockSystemHandler_HealthHandler_Call {
	return &MockSystemHandler_HealthHandler_Call{Call: _e.mock.On("HealthHandler", w, r)}
}

func (_c *MockSystemHandler_HealthHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_HealthHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSystemHandler_HealthHandler_Call) Return() *MockSystemHandler_HealthHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSystemHandler_HealthHandler_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_HealthHandler_Call {
	_c.Run(run)
	return _c
}

// LoginHandler provides a mock function for the type MockSystemHandler
func (_mock *MockSystemHandler) LoginHandler(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockSystemHandler_LoginHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginHandler'
type MockSystemHandler_LoginHandler_Call struct {
	*mock.Call
}

// LoginHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockSystemHandler_Expecter) LoginHandler(w interface{}, r interface{}) *MockSystemHandler_LoginHandler_Call {
	return &MockSystemHandler_LoginHandler_Call{Call: _e.mock.On("LoginHandler", w, r)}
}

func (_c *MockSystemHandler_LoginHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_LoginHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSystemHandler_LoginHandler_Call) Return() *MockSystemHandler_LoginHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSystemHandler_LoginHandler_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_LoginHandler_Call {
	_c.Run(run)
	return _c
}

// NewConsumerHandler provides a mock function for the type MockSystemHandler
func (_mock *MockSystemHandler) NewConsumerHandler(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockSystemHandler_NewConsumerHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewConsumerHandler'
type MockSystemHandler_NewConsumerHandler_Call struct {
	*mock.Call
}

// NewConsumerHandler is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockSystemHandler_Expecter) NewConsumerHandler(w interface{}, r interface{}) *MockSystemHandler_NewConsumerHandler_Call {
	return &MockSystemHandler_NewConsumerHandler_Call{Call: _e.mock.On("NewConsumerHandler", w, r)}
}

func (_c *MockSystemHandler_NewConsumerHandler_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_NewConsumerHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSystemHandler_NewConsumerHandler_Call) Return() *MockSystemHandler_NewConsumerHandler_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSystemHandler_NewConsumerHandler_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockSystemHandler_NewConsumerHandler_Call {
	_c.Run(run)
	return _c
}
