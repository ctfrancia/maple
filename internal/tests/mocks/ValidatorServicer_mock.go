// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockValidatorServicer creates a new instance of MockValidatorServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockValidatorServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockValidatorServicer {
	mock := &MockValidatorServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockValidatorServicer is an autogenerated mock type for the ValidatorServicer type
type MockValidatorServicer struct {
	mock.Mock
}

type MockValidatorServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockValidatorServicer) EXPECT() *MockValidatorServicer_Expecter {
	return &MockValidatorServicer_Expecter{mock: &_m.Mock}
}

// AddError provides a mock function for the type MockValidatorServicer
func (_mock *MockValidatorServicer) AddError(key string, message string) {
	_mock.Called(key, message)
	return
}

// MockValidatorServicer_AddError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddError'
type MockValidatorServicer_AddError_Call struct {
	*mock.Call
}

// AddError is a helper method to define mock.On call
//   - key string
//   - message string
func (_e *MockValidatorServicer_Expecter) AddError(key interface{}, message interface{}) *MockValidatorServicer_AddError_Call {
	return &MockValidatorServicer_AddError_Call{Call: _e.mock.On("AddError", key, message)}
}

func (_c *MockValidatorServicer_AddError_Call) Run(run func(key string, message string)) *MockValidatorServicer_AddError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockValidatorServicer_AddError_Call) Return() *MockValidatorServicer_AddError_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockValidatorServicer_AddError_Call) RunAndReturn(run func(key string, message string)) *MockValidatorServicer_AddError_Call {
	_c.Run(run)
	return _c
}

// Check provides a mock function for the type MockValidatorServicer
func (_mock *MockValidatorServicer) Check(ok bool, key string, message string) {
	_mock.Called(ok, key, message)
	return
}

// MockValidatorServicer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockValidatorServicer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ok bool
//   - key string
//   - message string
func (_e *MockValidatorServicer_Expecter) Check(ok interface{}, key interface{}, message interface{}) *MockValidatorServicer_Check_Call {
	return &MockValidatorServicer_Check_Call{Call: _e.mock.On("Check", ok, key, message)}
}

func (_c *MockValidatorServicer_Check_Call) Run(run func(ok bool, key string, message string)) *MockValidatorServicer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 bool
		if args[0] != nil {
			arg0 = args[0].(bool)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockValidatorServicer_Check_Call) Return() *MockValidatorServicer_Check_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockValidatorServicer_Check_Call) RunAndReturn(run func(ok bool, key string, message string)) *MockValidatorServicer_Check_Call {
	_c.Run(run)
	return _c
}

// In provides a mock function for the type MockValidatorServicer
func (_mock *MockValidatorServicer) In(key string, permittedValues ...string) bool {
	var tmpRet mock.Arguments
	if len(permittedValues) > 0 {
		tmpRet = _mock.Called(key, permittedValues)
	} else {
		tmpRet = _mock.Called(key)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for In")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string, ...string) bool); ok {
		r0 = returnFunc(key, permittedValues...)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockValidatorServicer_In_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'In'
type MockValidatorServicer_In_Call struct {
	*mock.Call
}

// In is a helper method to define mock.On call
//   - key string
//   - permittedValues ...string
func (_e *MockValidatorServicer_Expecter) In(key interface{}, permittedValues ...interface{}) *MockValidatorServicer_In_Call {
	return &MockValidatorServicer_In_Call{Call: _e.mock.On("In",
		append([]interface{}{key}, permittedValues...)...)}
}

func (_c *MockValidatorServicer_In_Call) Run(run func(key string, permittedValues ...string)) *MockValidatorServicer_In_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockValidatorServicer_In_Call) Return(b bool) *MockValidatorServicer_In_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockValidatorServicer_In_Call) RunAndReturn(run func(key string, permittedValues ...string) bool) *MockValidatorServicer_In_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnErrors provides a mock function for the type MockValidatorServicer
func (_mock *MockValidatorServicer) ReturnErrors() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReturnErrors")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// MockValidatorServicer_ReturnErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnErrors'
type MockValidatorServicer_ReturnErrors_Call struct {
	*mock.Call
}

// ReturnErrors is a helper method to define mock.On call
func (_e *MockValidatorServicer_Expecter) ReturnErrors() *MockValidatorServicer_ReturnErrors_Call {
	return &MockValidatorServicer_ReturnErrors_Call{Call: _e.mock.On("ReturnErrors")}
}

func (_c *MockValidatorServicer_ReturnErrors_Call) Run(run func()) *MockValidatorServicer_ReturnErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValidatorServicer_ReturnErrors_Call) Return(stringToString map[string]string) *MockValidatorServicer_ReturnErrors_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *MockValidatorServicer_ReturnErrors_Call) RunAndReturn(run func() map[string]string) *MockValidatorServicer_ReturnErrors_Call {
	_c.Call.Return(run)
	return _c
}

// Valid provides a mock function for the type MockValidatorServicer
func (_mock *MockValidatorServicer) Valid() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Valid")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockValidatorServicer_Valid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Valid'
type MockValidatorServicer_Valid_Call struct {
	*mock.Call
}

// Valid is a helper method to define mock.On call
func (_e *MockValidatorServicer_Expecter) Valid() *MockValidatorServicer_Valid_Call {
	return &MockValidatorServicer_Valid_Call{Call: _e.mock.On("Valid")}
}

func (_c *MockValidatorServicer_Valid_Call) Run(run func()) *MockValidatorServicer_Valid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockValidatorServicer_Valid_Call) Return(b bool) *MockValidatorServicer_Valid_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockValidatorServicer_Valid_Call) RunAndReturn(run func() bool) *MockValidatorServicer_Valid_Call {
	_c.Call.Return(run)
	return _c
}
