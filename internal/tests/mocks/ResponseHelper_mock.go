// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockResponseHelper creates a new instance of MockResponseHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResponseHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResponseHelper {
	mock := &MockResponseHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResponseHelper is an autogenerated mock type for the ResponseHelper type
type MockResponseHelper struct {
	mock.Mock
}

type MockResponseHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResponseHelper) EXPECT() *MockResponseHelper_Expecter {
	return &MockResponseHelper_Expecter{mock: &_m.Mock}
}

// BadRequestResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) BadRequestResponse(w http.ResponseWriter, r *http.Request, err error) {
	_mock.Called(w, r, err)
	return
}

// MockResponseHelper_BadRequestResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BadRequestResponse'
type MockResponseHelper_BadRequestResponse_Call struct {
	*mock.Call
}

// BadRequestResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockResponseHelper_Expecter) BadRequestResponse(w interface{}, r interface{}, err interface{}) *MockResponseHelper_BadRequestResponse_Call {
	return &MockResponseHelper_BadRequestResponse_Call{Call: _e.mock.On("BadRequestResponse", w, r, err)}
}

func (_c *MockResponseHelper_BadRequestResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockResponseHelper_BadRequestResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResponseHelper_BadRequestResponse_Call) Return() *MockResponseHelper_BadRequestResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_BadRequestResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, err error)) *MockResponseHelper_BadRequestResponse_Call {
	_c.Run(run)
	return _c
}

// ConflictResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) ConflictResponse(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockResponseHelper_ConflictResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConflictResponse'
type MockResponseHelper_ConflictResponse_Call struct {
	*mock.Call
}

// ConflictResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockResponseHelper_Expecter) ConflictResponse(w interface{}, r interface{}) *MockResponseHelper_ConflictResponse_Call {
	return &MockResponseHelper_ConflictResponse_Call{Call: _e.mock.On("ConflictResponse", w, r)}
}

func (_c *MockResponseHelper_ConflictResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockResponseHelper_ConflictResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResponseHelper_ConflictResponse_Call) Return() *MockResponseHelper_ConflictResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_ConflictResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockResponseHelper_ConflictResponse_Call {
	_c.Run(run)
	return _c
}

// ErrorResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) ErrorResponse(w http.ResponseWriter, r *http.Request, status int, message any) {
	_mock.Called(w, r, status, message)
	return
}

// MockResponseHelper_ErrorResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorResponse'
type MockResponseHelper_ErrorResponse_Call struct {
	*mock.Call
}

// ErrorResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - status int
//   - message any
func (_e *MockResponseHelper_Expecter) ErrorResponse(w interface{}, r interface{}, status interface{}, message interface{}) *MockResponseHelper_ErrorResponse_Call {
	return &MockResponseHelper_ErrorResponse_Call{Call: _e.mock.On("ErrorResponse", w, r, status, message)}
}

func (_c *MockResponseHelper_ErrorResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request, status int, message any)) *MockResponseHelper_ErrorResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockResponseHelper_ErrorResponse_Call) Return() *MockResponseHelper_ErrorResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_ErrorResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, status int, message any)) *MockResponseHelper_ErrorResponse_Call {
	_c.Run(run)
	return _c
}

// FailedValidationResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) FailedValidationResponse(w http.ResponseWriter, r *http.Request, errs map[string]string) {
	_mock.Called(w, r, errs)
	return
}

// MockResponseHelper_FailedValidationResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FailedValidationResponse'
type MockResponseHelper_FailedValidationResponse_Call struct {
	*mock.Call
}

// FailedValidationResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - errs map[string]string
func (_e *MockResponseHelper_Expecter) FailedValidationResponse(w interface{}, r interface{}, errs interface{}) *MockResponseHelper_FailedValidationResponse_Call {
	return &MockResponseHelper_FailedValidationResponse_Call{Call: _e.mock.On("FailedValidationResponse", w, r, errs)}
}

func (_c *MockResponseHelper_FailedValidationResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request, errs map[string]string)) *MockResponseHelper_FailedValidationResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 map[string]string
		if args[2] != nil {
			arg2 = args[2].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResponseHelper_FailedValidationResponse_Call) Return() *MockResponseHelper_FailedValidationResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_FailedValidationResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, errs map[string]string)) *MockResponseHelper_FailedValidationResponse_Call {
	_c.Run(run)
	return _c
}

// InvalidCredentialsResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) InvalidCredentialsResponse(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockResponseHelper_InvalidCredentialsResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InvalidCredentialsResponse'
type MockResponseHelper_InvalidCredentialsResponse_Call struct {
	*mock.Call
}

// InvalidCredentialsResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
func (_e *MockResponseHelper_Expecter) InvalidCredentialsResponse(w interface{}, r interface{}) *MockResponseHelper_InvalidCredentialsResponse_Call {
	return &MockResponseHelper_InvalidCredentialsResponse_Call{Call: _e.mock.On("InvalidCredentialsResponse", w, r)}
}

func (_c *MockResponseHelper_InvalidCredentialsResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockResponseHelper_InvalidCredentialsResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockResponseHelper_InvalidCredentialsResponse_Call) Return() *MockResponseHelper_InvalidCredentialsResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_InvalidCredentialsResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockResponseHelper_InvalidCredentialsResponse_Call {
	_c.Run(run)
	return _c
}

// ServerErrorResponse provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) ServerErrorResponse(w http.ResponseWriter, r *http.Request, err error) {
	_mock.Called(w, r, err)
	return
}

// MockResponseHelper_ServerErrorResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerErrorResponse'
type MockResponseHelper_ServerErrorResponse_Call struct {
	*mock.Call
}

// ServerErrorResponse is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - err error
func (_e *MockResponseHelper_Expecter) ServerErrorResponse(w interface{}, r interface{}, err interface{}) *MockResponseHelper_ServerErrorResponse_Call {
	return &MockResponseHelper_ServerErrorResponse_Call{Call: _e.mock.On("ServerErrorResponse", w, r, err)}
}

func (_c *MockResponseHelper_ServerErrorResponse_Call) Run(run func(w http.ResponseWriter, r *http.Request, err error)) *MockResponseHelper_ServerErrorResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 *http.Request
		if args[1] != nil {
			arg1 = args[1].(*http.Request)
		}
		var arg2 error
		if args[2] != nil {
			arg2 = args[2].(error)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockResponseHelper_ServerErrorResponse_Call) Return() *MockResponseHelper_ServerErrorResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockResponseHelper_ServerErrorResponse_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request, err error)) *MockResponseHelper_ServerErrorResponse_Call {
	_c.Run(run)
	return _c
}

// WriteJSON provides a mock function for the type MockResponseHelper
func (_mock *MockResponseHelper) WriteJSON(w http.ResponseWriter, status int, data any, headers http.Header) error {
	ret := _mock.Called(w, status, data, headers)

	if len(ret) == 0 {
		panic("no return value specified for WriteJSON")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(http.ResponseWriter, int, any, http.Header) error); ok {
		r0 = returnFunc(w, status, data, headers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResponseHelper_WriteJSON_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteJSON'
type MockResponseHelper_WriteJSON_Call struct {
	*mock.Call
}

// WriteJSON is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - status int
//   - data any
//   - headers http.Header
func (_e *MockResponseHelper_Expecter) WriteJSON(w interface{}, status interface{}, data interface{}, headers interface{}) *MockResponseHelper_WriteJSON_Call {
	return &MockResponseHelper_WriteJSON_Call{Call: _e.mock.On("WriteJSON", w, status, data, headers)}
}

func (_c *MockResponseHelper_WriteJSON_Call) Run(run func(w http.ResponseWriter, status int, data any, headers http.Header)) *MockResponseHelper_WriteJSON_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 http.ResponseWriter
		if args[0] != nil {
			arg0 = args[0].(http.ResponseWriter)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		var arg3 http.Header
		if args[3] != nil {
			arg3 = args[3].(http.Header)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockResponseHelper_WriteJSON_Call) Return(err error) *MockResponseHelper_WriteJSON_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResponseHelper_WriteJSON_Call) RunAndReturn(run func(w http.ResponseWriter, status int, data any, headers http.Header) error) *MockResponseHelper_WriteJSON_Call {
	_c.Call.Return(run)
	return _c
}
