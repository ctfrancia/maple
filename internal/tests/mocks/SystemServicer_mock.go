// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/ctfrancia/maple/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSystemServicer creates a new instance of MockSystemServicer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemServicer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemServicer {
	mock := &MockSystemServicer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSystemServicer is an autogenerated mock type for the SystemServicer type
type MockSystemServicer struct {
	mock.Mock
}

type MockSystemServicer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemServicer) EXPECT() *MockSystemServicer_Expecter {
	return &MockSystemServicer_Expecter{mock: &_m.Mock}
}

// CreateNewConsumer provides a mock function for the type MockSystemServicer
func (_mock *MockSystemServicer) CreateNewConsumer(consumer domain.NewAPIConsumer) (domain.NewAPIConsumer, error) {
	ret := _mock.Called(consumer)

	if len(ret) == 0 {
		panic("no return value specified for CreateNewConsumer")
	}

	var r0 domain.NewAPIConsumer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) (domain.NewAPIConsumer, error)); ok {
		return returnFunc(consumer)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) domain.NewAPIConsumer); ok {
		r0 = returnFunc(consumer)
	} else {
		r0 = ret.Get(0).(domain.NewAPIConsumer)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.NewAPIConsumer) error); ok {
		r1 = returnFunc(consumer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemServicer_CreateNewConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewConsumer'
type MockSystemServicer_CreateNewConsumer_Call struct {
	*mock.Call
}

// CreateNewConsumer is a helper method to define mock.On call
//   - consumer domain.NewAPIConsumer
func (_e *MockSystemServicer_Expecter) CreateNewConsumer(consumer interface{}) *MockSystemServicer_CreateNewConsumer_Call {
	return &MockSystemServicer_CreateNewConsumer_Call{Call: _e.mock.On("CreateNewConsumer", consumer)}
}

func (_c *MockSystemServicer_CreateNewConsumer_Call) Run(run func(consumer domain.NewAPIConsumer)) *MockSystemServicer_CreateNewConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.NewAPIConsumer
		if args[0] != nil {
			arg0 = args[0].(domain.NewAPIConsumer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSystemServicer_CreateNewConsumer_Call) Return(newAPIConsumer domain.NewAPIConsumer, err error) *MockSystemServicer_CreateNewConsumer_Call {
	_c.Call.Return(newAPIConsumer, err)
	return _c
}

func (_c *MockSystemServicer_CreateNewConsumer_Call) RunAndReturn(run func(consumer domain.NewAPIConsumer) (domain.NewAPIConsumer, error)) *MockSystemServicer_CreateNewConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function for the type MockSystemServicer
func (_mock *MockSystemServicer) Login(username string, password string) (any, error) {
	ret := _mock.Called(username, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (any, error)); ok {
		return returnFunc(username, password)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) any); ok {
		r0 = returnFunc(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(username, password)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemServicer_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockSystemServicer_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - username string
//   - password string
func (_e *MockSystemServicer_Expecter) Login(username interface{}, password interface{}) *MockSystemServicer_Login_Call {
	return &MockSystemServicer_Login_Call{Call: _e.mock.On("Login", username, password)}
}

func (_c *MockSystemServicer_Login_Call) Run(run func(username string, password string)) *MockSystemServicer_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSystemServicer_Login_Call) Return(v any, err error) *MockSystemServicer_Login_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSystemServicer_Login_Call) RunAndReturn(run func(username string, password string) (any, error)) *MockSystemServicer_Login_Call {
	_c.Call.Return(run)
	return _c
}

// NewAPIConsumer provides a mock function for the type MockSystemServicer
func (_mock *MockSystemServicer) NewAPIConsumer(consumer domain.NewAPIConsumer) (domain.NewAPIConsumer, error) {
	ret := _mock.Called(consumer)

	if len(ret) == 0 {
		panic("no return value specified for NewAPIConsumer")
	}

	var r0 domain.NewAPIConsumer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) (domain.NewAPIConsumer, error)); ok {
		return returnFunc(consumer)
	}
	if returnFunc, ok := ret.Get(0).(func(domain.NewAPIConsumer) domain.NewAPIConsumer); ok {
		r0 = returnFunc(consumer)
	} else {
		r0 = ret.Get(0).(domain.NewAPIConsumer)
	}
	if returnFunc, ok := ret.Get(1).(func(domain.NewAPIConsumer) error); ok {
		r1 = returnFunc(consumer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemServicer_NewAPIConsumer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewAPIConsumer'
type MockSystemServicer_NewAPIConsumer_Call struct {
	*mock.Call
}

// NewAPIConsumer is a helper method to define mock.On call
//   - consumer domain.NewAPIConsumer
func (_e *MockSystemServicer_Expecter) NewAPIConsumer(consumer interface{}) *MockSystemServicer_NewAPIConsumer_Call {
	return &MockSystemServicer_NewAPIConsumer_Call{Call: _e.mock.On("NewAPIConsumer", consumer)}
}

func (_c *MockSystemServicer_NewAPIConsumer_Call) Run(run func(consumer domain.NewAPIConsumer)) *MockSystemServicer_NewAPIConsumer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.NewAPIConsumer
		if args[0] != nil {
			arg0 = args[0].(domain.NewAPIConsumer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSystemServicer_NewAPIConsumer_Call) Return(newAPIConsumer domain.NewAPIConsumer, err error) *MockSystemServicer_NewAPIConsumer_Call {
	_c.Call.Return(newAPIConsumer, err)
	return _c
}

func (_c *MockSystemServicer_NewAPIConsumer_Call) RunAndReturn(run func(consumer domain.NewAPIConsumer) (domain.NewAPIConsumer, error)) *MockSystemServicer_NewAPIConsumer_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessSystemHealthRequest provides a mock function for the type MockSystemServicer
func (_mock *MockSystemServicer) ProcessSystemHealthRequest() domain.System {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessSystemHealthRequest")
	}

	var r0 domain.System
	if returnFunc, ok := ret.Get(0).(func() domain.System); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(domain.System)
	}
	return r0
}

// MockSystemServicer_ProcessSystemHealthRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessSystemHealthRequest'
type MockSystemServicer_ProcessSystemHealthRequest_Call struct {
	*mock.Call
}

// ProcessSystemHealthRequest is a helper method to define mock.On call
func (_e *MockSystemServicer_Expecter) ProcessSystemHealthRequest() *MockSystemServicer_ProcessSystemHealthRequest_Call {
	return &MockSystemServicer_ProcessSystemHealthRequest_Call{Call: _e.mock.On("ProcessSystemHealthRequest")}
}

func (_c *MockSystemServicer_ProcessSystemHealthRequest_Call) Run(run func()) *MockSystemServicer_ProcessSystemHealthRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSystemServicer_ProcessSystemHealthRequest_Call) Return(system domain.System) *MockSystemServicer_ProcessSystemHealthRequest_Call {
	_c.Call.Return(system)
	return _c
}

func (_c *MockSystemServicer_ProcessSystemHealthRequest_Call) RunAndReturn(run func() domain.System) *MockSystemServicer_ProcessSystemHealthRequest_Call {
	_c.Call.Return(run)
	return _c
}
